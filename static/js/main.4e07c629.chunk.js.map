{"version":3,"sources":["store/actions.js","components/CurrencyTable.jsx","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["loadCurrencyData","dispatch","axios","get","then","response","result","counter","i","data","Data","push","nbr","name","CoinName","logo","ImageUrl","getCurrency","loadCurrencyToShow","type","currencyAll","toShow","page","arguments","length","undefined","CurrencyTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pageChangeHandler","e","_ref","activePage","setState","state","react_default","a","createElement","Table","celled","unstackable","Header","Row","HeaderCell","Body","currencyDisplayed","map","currency","key","Cell","src","alt","style","width","height","Footer","colSpan","Pagination","totalPages","totalPage","onPageChange","floated","Component","connect","test","Math","ceil","actionCreators","App","className","components_CurrencyTable","Boolean","window","location","hostname","match","initialState","reducer","action","objectSpread","start","end","display","slice","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e07c629.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport function loadCurrencyData() {\n    return(dispatch) => {\n        return axios.get('https://min-api.cryptocompare.com/data/all/coinlist').then((response) => {\n            let result = [];\n            let counter = 0;\n            for (let i in response.data.Data) {\n                counter++;\n                result.push({\n                    nbr: counter,\n                    name: response.data.Data[i].CoinName,\n                    logo: 'https://www.cryptocompare.com' + response.data.Data[i].ImageUrl\n                });\n            }\n            dispatch(getCurrency(result));\n            return result;\n        })\n        .then((data) => {\n            dispatch(loadCurrencyToShow(data));\n        })\n    }\n}\n\nexport function getCurrency(data) {\n    return {\n        type: 'GET_ALL_CURRENCY',\n        currencyAll: data\n    }\n}\n\nexport function loadCurrencyToShow(data, page = 1) {\n    return {\n        type: 'LOAD_DATA_TO_SHOW',\n        toShow: data,\n        page: page\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Pagination } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as actionCreators from '../store/actions.js';\n\nclass CurrencyTable extends Component {\n    constructor(props) {\n        super(props);\n        props.loadCurrencyData();\n        this.state = {\n            activePage: 1\n        }\n    }\n\n    pageChangeHandler = (e, { activePage }) => {\n        this.setState({ activePage });\n        this.props.loadCurrencyToShow(this.props.currencyAll, activePage);\n    }\n\n    render() {\n        return (\n            <Table celled unstackable>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>&#8470;</Table.HeaderCell>\n                        <Table.HeaderCell>Currency Name</Table.HeaderCell>\n                        <Table.HeaderCell>Picture</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {this.props.currencyDisplayed.length !== 0 &&\n                        this.props.currencyDisplayed.map((currency, i) => (\n                            <Table.Row key={i}>\n                                <Table.Cell>{currency.nbr}</Table.Cell>\n                                <Table.Cell>{currency.name}</Table.Cell>\n                                <Table.Cell>\n                                    <img src={currency.logo} \n                                        alt={currency.name} \n                                        style={{width: '50px', height: '50px'}}/>\n                                </Table.Cell>\n                            </Table.Row>\n                        ))\n                    }\n                </Table.Body>\n\n                <Table.Footer>\n                <Table.Row>\n                    <Table.HeaderCell colSpan='3'>\n                    <Pagination \n                        activePage={this.state.activePage}\n                        totalPages={this.props.totalPage}\n                        onPageChange={this.pageChangeHandler}\n                        floated='right'/>\n                    </Table.HeaderCell>\n                </Table.Row>\n                </Table.Footer>\n            </Table>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        test: state.test,\n        totalPage: Math.ceil(state.currencyAll.length / 20),\n        currencyAll: state.currencyAll,\n        currencyDisplayed: state.currencyDisplayed\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(CurrencyTable);","import React, { Component } from 'react';\nimport './App.css';\nimport CurrencyTable from './components/CurrencyTable';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CurrencyTable/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    currencyAll: [],\n    currencyDisplayed: []\n}\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'GET_ALL_CURRENCY':\n            return {\n                ...state,\n                currencyAll: action.currencyAll\n            }\n        case 'LOAD_DATA_TO_SHOW':\n            let start = action.page === 1 ? 0 : (action.page - 1) * 20;\n            let end = start + 20;\n            let display = action.toShow.slice(start, end);\n            return {\n                ...state,\n                currencyDisplayed: display\n            }\n        default:\n            return state;            \n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}